<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 회원기능 관련한 SQL문을 작성 해 놓는 member.xml(매퍼파일) -->    

<!-- MembeDAO에서 mapper태그 내부에 접근 하기 위해 mapper태그의 namespace 이름 설정 -->
<mapper namespace="mapper.member">

	<!-- 
		resultMap태그의 역할
		 -  select구문실행 후 조회한 한줄 단위의 열값들을 저장할 클래스 지정 하는 태그 
		 -	result태그 를 내부에 작성 해서  조회된 열의 값을 저장할 VO의 변수명을 설정 합니다.
		 -  result태그의 property속성 값은 MemberVO의 변수명
		    result태그의 column속성 값은 조회한 행의 열명을 작성합니다.
		       이 두개를 작성하면 조회된 열의 값들이 MemerVO의 각 변수에 자동 매칭되어 저장됩니다. 
	 -->

					   		<!-- type="조회한 한줄 내용을 저장할 변수들이 있는 VO의 별칭" -->	
					   		
	<resultMap  id="memResult"  type="memberVO">
	
		<result property="id"  column="id" />
		<result property="pwd"  column="pwd" />
		<result property="name"  column="name" />
		<result property="email"  column="email" />
		<result property="joinDate"  column="joinDate" />
		
	</resultMap>

 
 	<!-- 조회한 행(레코드)를 지정한 컬럼이름을 key로  조회된 열의 값을 value로 해서 HahsMap에 저장합니다. 
 	<resultMap id="memResult" type="java.util.HashMap" >
 	
		<result property="id"  column="id" />
		<result property="pwd"  column="pwd" />
		<result property="name"  column="name" />
		<result property="email"  column="email" />
		<result property="joinDate"  column="joinDate" />
 	
 	</resultMap>
 	-->
	<!-- 
		id="DAO에서  id값을 이용해 해당 SQL문을 호출하게 됩니다."
		resultMap="select 조회후 결과 한줄 데이터씩 저장할  객체의 주소를 설정할수 있게  
		                    위에 작성해 놓은 resultMap태그의 id속성의 값 memResult설정"
	 -->
	<select id="selectAllMemberList"   resultMap="memResult"  >
	<![CDATA[	
		select * from t_member order by joinDate desc
	]]>
	</select>

	<!-- 
		 id열의 값이 hong인 회원의 이름을 조회 
		 DAO에서 아래의 select태그의 문장을 실행하기 위해 호출하겠죠?
		 SqlSession객체의 selectOne메소드를 이용하겠죠?
		 조회한 이름은 하나의 문자열이기때문에 resultType속성의 값을 String으로 작성해 준다.
	 -->
	<select id="selectName"  resultType="String" >
	<![CDATA[
		select name from t_member where id='hong'
	]]>
	</select>
	
	<select id="selectPwd" resultType="int">
	<![CDATA[	
		select pwd from t_member where id='hong'
	]]>	
	</select>
	
	<!-- 입력한 아이디를 이용해 회원 한사람의 정보를 조회 하는 SELECT -->
	<!-- parameterType속성에 값으로 MemberDAO파일에서 selectOne메소드 호출시 전달되는 조건값의 타입을 적어준다 -->
	<!-- resultType속성에는 값으로 조회된 한행(레코드)를 MemberVO객체의 각변수에 저장하기 위해 memberVO별칭을 적어준다 -->
	<select id="selectMemberById" parameterType="String" resultType="memberVO"    >
	<![CDATA[
		select * from t_member where id = #{id}
	]]>
	</select>
	
	<!-- 입력한 비밀번호를 이용해 회원 여러사람의 정보를 조회하는 SELECT -->
	<select id="selectMemberByPwd" parameterType="int" resultMap="memResult">
	<![CDATA[
		select * from t_member where pwd = #{pwd}
	]]>
	</select>
	
	<!--  #{MemberVO클래스의 변수명 } -->
	<insert id="insertMember" parameterType="memberVO">
	<![CDATA[	
		insert into t_member(id,pwd,name,email)
		values(#{id},#{pwd},#{name},#{email})
	]]>
	</insert>
	
	<!--  #{HashMap에 저장된 key} -->
	<insert id="insertMember2" parameterType="java.util.HashMap">
	<![CDATA[	
		insert into t_member(id,pwd,name,email)
		values(#{id},#{pwd},#{name},#{email})
	]]>
	</insert>	
	
	<!--  #{MemberVO의 변수명} -->
	<update id="updateMember" parameterType="memberVO">
	<![CDATA[
		update t_member set pwd=#{pwd}, name=#{name}, email=#{email}
		where id=#{id}
	]]>
	</update>

	<!-- #{MemberDAO의 deleteMember(String id)의 매개변수명 id작성} -->
	<delete id="deleteMember" parameterType="String">
	 <![CDATA[
		delete from t_member
		where id=#{id}
	 ]]>	
	</delete>

	<!-- 
		<![CDATA[ SQL문작성  ]]>
	
		<![CDATA[  ]]>  ?  
			-   SQL문안에  > , < 등을 구분해서 xml파일에서 정확히 기호를 인식하기 위해 태그를 꼭 작성하자.
			-   xml문서는 태그와 텍스트로 구성되어 있습니다.
				데이터에는 xml문법과 충돌할수 있는 특수 문자가 포함될수 있습니다.
				예를 들어  '<',  '>', '&'와 같은 문자는 xml태그와 해석되는데,
				때로는 문자를 포함하는 데이터를 xml문서에 넣아야할수 도 있습니다.
				이런 경우를 대비하여 xml은 CDATA섹션을 제공합니다. 
				CDATA섹션은 특수문자를 그대로 포함할수 있도록 해줍니다.
				이것은 XML파서에게 해당 섹션의 내용을 그대로 유지하고 특수문자를 해석하지 않도록 지시합니다.
				
	 -->
	 <!-- 
	 	동적 SQL문 작성 
	 	
	 	<if></if>태그  문법
	 		
	 		select * from 테이블명  <- 공통으로 사용하는 SQL문장 
	 		
	 		<where> <- <where>태그를 이용해  SQL문의 where절을 표현 합니다.
	 			
	 			<if test="조건식">
	 				조건식에 만족하면 where절 뒤에 붙일 SQL문장
	 			</if>
	 			
	 		</where>
	 	
	 	
	 	
	 	
		<![CDATA[
			select * from t_member   <- 공통으로 사용하는 SQL문입니다.
		]]>		
		<where>    <- <where>태그를 이용해 SQL문의 where절을 표현합니다. 
		
			첫번째 <if>태그는 parameterType속성의 memberVO객체의 name변수로 전달되는 값이 있으면
			select문에 이름으로 조회 하는 추가할  SQL문을 작성합니다.
		
			두번째 <if>태그는 parameterType속성의 memberVO객체의 email변수로 전달되는 값이 있으면
			select문에 입력한 이메일로 조회 하는   추가할 SQL문을 작성합니다.
		
		</where>
			
		where절 뒤에 추가할 정렬  코드 작성	
		
		
		
		
		
		이름만 입력하고 조회 요청을 받았을때 어떻게 SQL문이 완성될까요?
					
			select * from t_member where name = #{name}
			order by joinDate desc
		이메일만 입력하고 조회 요청을 받았을때 어떻게 SQL문이 완성될까요?
		
			select * from t_member where email = #{email}
			order by joinDate desc
		
		이름과 이메일을 모두 입력하고 조회 요청을 받았으때 어떻게 SQL문이 완성될까요?
		
		select * from t_member where name = #{name} and email = #{email} 	
		order by joinDate desc
						
	 -->
	 
<!-- 	
실습1. if 활용  
	 <select id="searchMember" parameterType="memberVO" resultMap="memResult" >
	 	<![CDATA[       
	 		select * from t_member
	 	]]>
	 	<where>
	 		<if test="name != '' and name != null">
	 			name = #{name}
	 		</if>
	 		<if test="email != '' and email != null">
	 			and email = #{email} 
	 		</if>
	 	</where>
	 	
	 	order by joinDate desc
	 	
	 </select>
 -->	
<!-- 
	 동적 SQL문을 만들기 위한   choose  when  otherwise 태그 
	 
	 문법
	 	select * from 테이블명    <- 공통으로 사용될 SQL문장
	 	<where>
	 		<choose>
	 			<when test="조건식1"> 조건식1에 만족하면 where뒤에 붙일 SQL문장 작성  </when>
	 			<when test="조건식2"> 조건식2에 만족하면 where뒤에 붙일 SQL문장 작성  </when>
	 			......
	 			
	 			<otherwise> 위 when태그의 조건식에 모두 만족하지 않으면 where뒤에 붙일 SQL문장 작성 </otherwise>
	 		</choose>
		</where>
		정렬 또는 추가할 SQL문장 작성
 -->	
	 
	 
<!-- 
	MyBatis
		<sql> 태그와  <include>태그로 SQL문 중복 제거하기 
		- 마이바티스에서는 <sql>태그를 제공하여  매퍼 파일에서  SQL문을 재사용할수 있게 해줍니다.
 -->	 
	 <!-- <sql>태그를 이용해 공통으로 사용할 SQL문을 작성 해 놓자  -->
	 <sql id="a"> 
	 	<![CDATA[       
	 		select * from t_member
	 	]]>
	 </sql>
	 
	 
	 <select id="searchMember" parameterType="memberVO" resultMap="memResult" >
	 	
	 	<!-- <include>태그를 이용해 공통 SQL문을 재사용합니다. -->
	 	<include refid="a"/>
	 	
	 	<where>
			<choose>
				<!-- 이름과 이메일을 모두 입력해서 조회 하는 경우 -->
				<when test="name != '' and name != null  and  email != '' and email != null">
					name = #{name} and email = #{email}
				</when>
				<!-- 이름만 입력 해서 조회하는 경우  -->
	 			<when test="name != '' and name != null"> 
	 				name = #{name}
	 			</when>
	 			<!-- 이메일만 입력해서 조회하는 경우  -->
	 			<when test="email != '' and email != null"> 
	 				email = #{email} 
	 			 </when>		
	 		</choose>	 	
	 	</where>
	 	
	 	order by joinDate desc
	 	
	 </select>
	 
	 
	 <!-- 
	 	select * from t_member
		where name in('홍길동','이순신','차범근')
		order by joinDate DESC
									
									//["홍길동","이순신","차범근"]
								    //   0       1      2    index
	  -->
	 <select id="foreachSelect" parameterType="java.util.List" resultMap="memResult">
	 	
	 	<!-- <include>태그를 이용해 공통 SQL문을 재사용합니다. -->
	 	<include refid="a"/>
	 	
	 	where name in
	 	<foreach  item="item"   collection="list"  open="("  separator="," close=")"  >
	 		#{item}
	 	</foreach>
	 	order by joinDate desc
	 </select>

<!-- 
	<forEach>태그로 3사람의 회원정보들 다중 INSERT
	
		오라클 
			  INSERT ALL
			  	
			  	INTO t_member(id, pwd, name, email)
			  	values('m1','1234','박길동','m1@test.com')

			  	INTO t_member(id, pwd, name, email)
			  	values('m2','1234','이길동','m2@test.com')
			  	
			  	INTO t_member(id, pwd, name, email)
			  	values('m3','1234','김길동','m3@test.com')
			  	
			  SELECT * FROM DUAL

 -->	 
	 <!-- 
	 	[new MemberVO("m1", "1234", "박길동", "m1@test.com"),    0  index
	 	 new MemberVO("m2", "1234", "이길동", "m2@test.com"),    1  index
	 	 new MemberVO("m3", "1234", "김길동", "m3@test.com")]    2  index
	 
	  -->
	 <insert id="foreachInsert" parameterType="java.util.List" >
	 
	 	<foreach item="vo" collection="list" 
	 	         open="INSERT ALL" separator="   " close="SELECT * FROM DUAL">		
	 			
	 			INTO t_member(id, pwd, name, email)
			  	values(#{vo.id},#{vo.pwd},#{vo.name},#{vo.email})
	 	
	 	</foreach>
	 
	 
	 </insert>
	 
<!-- 
	추가  참고1.
	오라클의 dual 가상테이블 역할
	
	 Oracle의 DUAL 테이블은 특수한 가상테이블로, 주로 단순한 SELECT문을 사용할떄 또는 
	 특정 함수 또는 표현식을 테스트할떄 사용됩니다.
	 
	 1. 값 생성 및 검사 : DUAL 테이블은 하나의 행을 포함하며, 이 테이블을 사용하여 값을 생성하거나 결과를 검사할수 있습니다
	 예를 들어  SELECT  1  FROM DUAL 과 같이 사용하여 숫자 1을 반환해서 조회할수 있습니다.
	 
	 2. 함수 및 표현식 테스트: 함수 또는 표현식을 테스트 하기 위해 DUAL 테이블을 사용할수 있습니다.
	 예를 들어 SELECT SYSDATE FROM DUAL 을 사용하여 현재 날짜 및 시간을 얻을수 있습니다.

	3. 단일 행 리턴 : DUAL 테이블은 항상 하나의 행만을 조회해서 반환하므로 
				  함수 또는 표현식을 사용하여 하나의 조회된 결과를 얻을떄 유용합니다.
				  
	4. 필요한 경우 테스트 및 실험 : DUAL테입르은 일부 쿼리를 간단히 실행하고 결과를 확인하는 용도로 사용되며,
						    실제 데이터 테이블에 영향을 주지 않습니다.
						   일반적으로 DUAL테이블은 간단한 SQL문을 실행하거나 
						   ORACLE 함수 및 표현식을 테스트하는데 사용되며,
						   결과를 산출하거나 검사하는 용도로 활용됩니다.
						   
	예시코드 
	
		1. 숫자 1을 반환하는 예시:
			SELECT 1 FROM DUAL;
			
		2. 현재 날짜 및 시간을 반환하는 예시:
			SELECT SYSDATE FROM DUAL;
		
		3. 문자열을 반환하는 예시:
			SELECT 'Hello, World' FROM DUAL;
			
		4. 사용자 정의 함수 호출하는 예시:
		
			-가상 함수 정의 
			CREATE OR REPLACE FUNCTION get_greeting RETURN VARCHAT2 IS
			BEGIN
				RETURN 'Good morning!';
			END;
			
			- 함수 호출
			SELECT get_greeting() FROM DUAL;
		
			
	추가 참고2.
		
		MYSQL사용시  MyBatis에서 동적 SQL을 사용하여 다중 INSERT구문을 생성하는 예시~
		
		<insert id="insertMultipleItems"   paramerType="java.util.List">
				
			INSERT INTO 테이블명 (column1, column2, column3)
			VALUES
			
			<forEach   item="vo"  collection="list" open="("  separator="," close=")">
					
					#{vo.변수명1}, #{vo.변수명2}, #{vo.변수명3}
					
			</forEach>	
				
		</insert>		
		
 	 INSERT INTO 테이블명 (column1, column2, column3)
	 VALUES(#{vo.변수명1}, #{vo.변수명2}, #{vo.변수명3},
		    #{vo.변수명1}, #{vo.변수명2}, #{vo.변수명3},
		    #{vo.변수명1}, #{vo.변수명2}, #{vo.변수명3})
										  
 -->	 
	 
<!-- 

추가 참고3.  마이바티스에서 오라클의 like연산자로 검색할떄 '%'기호와 조건값은 사이에 반드시 || 기호를 사용해서 
                   연결 해 주어야 합니다.

	      select * from t_member
	      where name like '%' #{name} '%'    < 잘못된 구문 오류 발생


		  select * from t_member
		  where name like '%' || #{name} || '%'    < 잘된 구문 


추가 참고4. Mybatis에서 #{} 과 ${}의 차이 

		 https://logical-code.tistory.com/25



 -->



	 
	 
</mapper>









